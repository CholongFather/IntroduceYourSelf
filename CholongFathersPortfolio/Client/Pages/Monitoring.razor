@page "/Monitoring"
@inject HttpClient Http

<DateEdit TValue="DateTime?" />

<Button Color="Color.Primary">CPU</Button>
<Button Color="Color.Secondary">Memory</Button>
<Button Color="Color.Success">Disk</Button>

<LineChart @ref="lineChart" TItem="double" />

@code{
	LineChart<double> lineChart;

	protected override async Task OnInitializedAsync()
	{
		var a = await Http.GetFromJsonAsync<MonitoringCpuDateModel>("Monitoring/Cpu");
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await HandleRedraw();
		}
	}

	async Task HandleRedraw()
	{
		await lineChart.Clear();

		await lineChart.AddLabelsDatasetsAndUpdate(Labels, GetLineChartDataset());
	}

	LineChartDataset<double> GetLineChartDataset()
	{
		return new LineChartDataset<double>
		{
			Label = "CPU (%)",
			Data = GetMonitoringData(),
			BackgroundColor = backgroundColors,
			BorderColor = borderColors,
			Fill = true,
			PointRadius = 2,
			BorderDash = new List<int> { }
		};
	}

	string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
	List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
	List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

	List<double> GetMonitoringData()
	{

		return new List<double> { 0, 1, 2, 3, 4, 5, 6, 7 };
	}
}
